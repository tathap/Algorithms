//For every number from 1 to 10^7, I will find all its multiples. This code runs in O(nlogn)

const ll MAXVAL = 1e7 + 1;

void Sieve()
{
    for (ll i = 1; i < MAXN; i++) {
        for (ll j = i; j < MAXN; j+= i) {
            //get all j that are a multiple of i
        }
    }
}


//To look for primes

bool isPrime[MAXN + 1];

set <ll> primes;
void Sieve()
{
    isPrime[0] = false;

    for (ll i = 1; i <= MAXN; i++) {
        isPrime[i] = true;
    }
        
    for (ll i = 2; i <= MAXN; i++) {
        if (isPrime[i]) {
            primes.insert(i);
            for (ll j = i; j <= MAXN; j += i) {
                isPrime[j] = false;
            }
        }
    }
}

//We can also use the Sieve to get the prime factorization of a number in logn time by precomputing the smallest prime that divides every number 


ll smallest[MAXN + 1];
void Sieve()
{
    for (ll i = 0; i <= MAXN; i++) {
        smallest[i] = INF;
    }
        
    for (ll i = 2; i <= MAXN; i++) {
        if (smallest[i] == INF) {
            smallest[i] = i;
            for (ll j = i; j <= MAXN; j += i) {
                smallest[j] = min(smallest[j], smallest[i])
            }
        }
    }
}

//Once you have precomputed the smallest prime number that divides every single number, then it's very easy to get the prime factorization of some number k
while (k != 1) {
    k /= smallest[k];
}
